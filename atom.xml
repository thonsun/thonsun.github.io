<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>thonsun&#39;s blog</title>
  
  <subtitle>thonsun&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://thonsun.github.io/"/>
  <updated>2021-04-08T06:55:35.928Z</updated>
  <id>https://thonsun.github.io/</id>
  
  <author>
    <name>thonsun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shiro反序列化漏洞分析</title>
    <link href="https://thonsun.github.io/2021/04/08/shiro-fan-xu-lie-hua-lou-dong-fen-xi/"/>
    <id>https://thonsun.github.io/2021/04/08/shiro-fan-xu-lie-hua-lou-dong-fen-xi/</id>
    <published>2021-04-08T06:55:35.000Z</published>
    <updated>2021-04-08T06:55:35.928Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
       
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaSec Java安全系列</title>
    <link href="https://thonsun.github.io/2021/01/09/java-an-quan-xi-lie/"/>
    <id>https://thonsun.github.io/2021/01/09/java-an-quan-xi-lie/</id>
    <published>2021-01-09T01:13:50.000Z</published>
    <updated>2021-01-09T10:24:05.174Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;这里作为Java安全系列的提纲，总结在学Web安全的过程，在复现环境，调试代码加深对原理的理解&lt;/p&gt;
&lt;h2 id=&quot;一、JavaWeb技术&quot;&gt;&lt;a href=&quot;#一、JavaWeb技术&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="javasec" scheme="https://thonsun.github.io/categories/javasec/"/>
    
    
      <category term="javasec" scheme="https://thonsun.github.io/tags/javasec/"/>
    
  </entry>
  
  <entry>
    <title>JavaSec jvm运行机制与类加载应用</title>
    <link href="https://thonsun.github.io/2020/12/29/jvm-yun-xing-ji-zhi-yu-lei-jia-zai-ying-yong/"/>
    <id>https://thonsun.github.io/2020/12/29/jvm-yun-xing-ji-zhi-yu-lei-jia-zai-ying-yong/</id>
    <published>2020-12-29T12:18:24.000Z</published>
    <updated>2020-12-30T06:47:08.313Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在这边文章将讲述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.Java语言的基础，从JVM角度讲述java程序运行的模型，如jvm内存模型，在脑海形成java语言编程到运行的概念；&lt;/p&gt;
&lt;p&gt;2.类加载与应用：理解作为Java程序的基本元素Class字节码，Class
        
      
    
    </summary>
    
      <category term="javasec" scheme="https://thonsun.github.io/categories/javasec/"/>
    
    
      <category term="javasec" scheme="https://thonsun.github.io/tags/javasec/"/>
    
  </entry>
  
  <entry>
    <title>JaveSec javaagent技术研究</title>
    <link href="https://thonsun.github.io/2020/12/26/javaagent-ji-zhu-yan-jiu/"/>
    <id>https://thonsun.github.io/2020/12/26/javaagent-ji-zhu-yan-jiu/</id>
    <published>2020-12-25T19:13:08.000Z</published>
    <updated>2020-12-28T02:39:05.714Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;在学习java反序列化漏洞的时候，看到有采用 &lt;a
        
      
    
    </summary>
    
      <category term="javasec" scheme="https://thonsun.github.io/categories/javasec/"/>
    
    
      <category term="javasec" scheme="https://thonsun.github.io/tags/javasec/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-26945 Mybatis远程代码执行漏洞复现</title>
    <link href="https://thonsun.github.io/2020/12/24/cve-2020-26945-mybatis-yuan-cheng-dai-ma-zhi-xing-lou-dong-fu-xian/"/>
    <id>https://thonsun.github.io/2020/12/24/cve-2020-26945-mybatis-yuan-cheng-dai-ma-zhi-xing-lou-dong-fu-xian/</id>
    <published>2020-12-24T13:18:11.000Z</published>
    <updated>2020-12-28T02:39:56.810Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;MyBatis 本是Apache的一个开源项目iBatis, 2010年这个项目由Apache Software
        
      
    
    </summary>
    
      <category term="漏洞复现" scheme="https://thonsun.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="https://thonsun.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaSec Tomcat内存Webshell分析</title>
    <link href="https://thonsun.github.io/2020/12/10/tomcat-nei-cun-webshell-fen-xi/"/>
    <id>https://thonsun.github.io/2020/12/10/tomcat-nei-cun-webshell-fen-xi/</id>
    <published>2020-12-10T13:24:24.000Z</published>
    <updated>2020-12-28T03:07:39.374Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;随着各种JAVA指定环境RCE漏洞的出现，Java 
        
      
    
    </summary>
    
      <category term="javasec" scheme="https://thonsun.github.io/categories/javasec/"/>
    
    
      <category term="javasec" scheme="https://thonsun.github.io/tags/javasec/"/>
    
  </entry>
  
  <entry>
    <title>JavaSec rmi利用分析</title>
    <link href="https://thonsun.github.io/2020/12/04/rmi-li-yong-fen-xi/"/>
    <id>https://thonsun.github.io/2020/12/04/rmi-li-yong-fen-xi/</id>
    <published>2020-12-04T12:52:13.000Z</published>
    <updated>2021-03-18T16:11:29.021Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在《JavaSec JNDI注入利用分析》中JNDI支持访问多种命名与目录服务，其中就有利用RMI达成RCE的目的。RMI（Remote Method
        
      
    
    </summary>
    
      <category term="javasec" scheme="https://thonsun.github.io/categories/javasec/"/>
    
    
      <category term="javasec" scheme="https://thonsun.github.io/tags/javasec/"/>
    
  </entry>
  
  <entry>
    <title>JavaSec jndi注入利用分析</title>
    <link href="https://thonsun.github.io/2020/12/02/jndi-zhu-ru-li-yong-fen-xi/"/>
    <id>https://thonsun.github.io/2020/12/02/jndi-zhu-ru-li-yong-fen-xi/</id>
    <published>2020-12-02T12:52:02.000Z</published>
    <updated>2021-03-18T16:13:52.715Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在fastjson反序列化漏洞利用的学习中引出了JNDI的利用攻击方式，JNDI(Java Naming and Directory
        
      
    
    </summary>
    
      <category term="javasec" scheme="https://thonsun.github.io/categories/javasec/"/>
    
    
      <category term="javasec" scheme="https://thonsun.github.io/tags/javasec/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://thonsun.github.io/2020/11/20/fastjson-fan-xu-lie-hua-lou-dong-li-yong-yuan-li/"/>
    <id>https://thonsun.github.io/2020/11/20/fastjson-fan-xu-lie-hua-lou-dong-li-yong-yuan-li/</id>
    <published>2020-11-20T13:23:15.000Z</published>
    <updated>2021-04-02T06:39:44.506Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在上篇《JavaSec Java反序列化漏洞利用》中指出，不安全的输入字节流参与甚至改变了程序的执行流是Java反序列化漏洞利用的成因，对于从字节序列反向实例化对象除了Java
        
      
    
    </summary>
    
      <category term="javasec" scheme="https://thonsun.github.io/categories/javasec/"/>
    
    
      <category term="javasec" scheme="https://thonsun.github.io/tags/javasec/"/>
    
  </entry>
  
  <entry>
    <title>JavaSec Fastjson反序列漏洞复现</title>
    <link href="https://thonsun.github.io/2020/11/10/fastjson-fan-xu-lie-lou-dong-fu-xian/"/>
    <id>https://thonsun.github.io/2020/11/10/fastjson-fan-xu-lie-lou-dong-fu-xian/</id>
    <published>2020-11-10T13:23:29.000Z</published>
    <updated>2020-12-29T04:43:06.996Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在《JavaSec
        
      
    
    </summary>
    
      <category term="javasec" scheme="https://thonsun.github.io/categories/javasec/"/>
    
    
      <category term="javasec" scheme="https://thonsun.github.io/tags/javasec/"/>
    
  </entry>
  
  <entry>
    <title>JavaSec Jackjson反序列化漏洞利用原理</title>
    <link href="https://thonsun.github.io/2020/11/02/jackjson-fan-xu-lie-hua-lou-dong-li-yong-yuan-li/"/>
    <id>https://thonsun.github.io/2020/11/02/jackjson-fan-xu-lie-hua-lou-dong-li-yong-yuan-li/</id>
    <published>2020-11-02T13:23:43.000Z</published>
    <updated>2020-12-28T09:51:40.992Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在上篇《JavaSec
        
      
    
    </summary>
    
      <category term="javasec" scheme="https://thonsun.github.io/categories/javasec/"/>
    
    
      <category term="javasec" scheme="https://thonsun.github.io/tags/javasec/"/>
    
  </entry>
  
  <entry>
    <title>JavaSec Jackjson反序列漏洞复现</title>
    <link href="https://thonsun.github.io/2020/10/24/jackjson-fan-xu-lie-lou-dong-fu-xian/"/>
    <id>https://thonsun.github.io/2020/10/24/jackjson-fan-xu-lie-lou-dong-fu-xian/</id>
    <published>2020-10-24T13:23:59.000Z</published>
    <updated>2020-12-28T09:33:53.571Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在《JavaSec
        
      
    
    </summary>
    
      <category term="javasec" scheme="https://thonsun.github.io/categories/javasec/"/>
    
    
      <category term="javasec" scheme="https://thonsun.github.io/tags/javasec/"/>
    
  </entry>
  
  <entry>
    <title>JavaSec java反序列化漏洞利用分析</title>
    <link href="https://thonsun.github.io/2020/10/20/java-fan-xu-lie-hua-lou-dong-li-yong-fen-xi/"/>
    <id>https://thonsun.github.io/2020/10/20/java-fan-xu-lie-hua-lou-dong-li-yong-fen-xi/</id>
    <published>2020-10-20T12:18:19.000Z</published>
    <updated>2021-04-08T13:19:30.579Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Java反序列是一个将对象转换为字节流的机制，是在json,xml数据格式之外的一个数据传输格式，是Java原生支持的。但是不安全的序列化与反序列使用存在安全风险，这是对不可信的输入数据没有严格的校验改变了程序的执行流程，达到任意代码执行等目标，从这个Java反序列化漏洞的
        
      
    
    </summary>
    
      <category term="javasec" scheme="https://thonsun.github.io/categories/javasec/"/>
    
    
      <category term="javasec" scheme="https://thonsun.github.io/tags/javasec/"/>
    
  </entry>
  
  <entry>
    <title>环境配置</title>
    <link href="https://thonsun.github.io/2019/12/29/huan-jing-pei-zhi/"/>
    <id>https://thonsun.github.io/2019/12/29/huan-jing-pei-zhi/</id>
    <published>2019-12-29T11:59:38.000Z</published>
    <updated>2020-12-24T13:47:08.885Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用电脑浏览效果更佳！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;整理常用的win | linux环境，包括开发用环境：Jetbrain全家桶crack过程；&lt;/p&gt;
    
    </summary>
    
      <category term="环境配置" scheme="https://thonsun.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="环境配置" scheme="https://thonsun.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>从安装第三方软件学习Ubuntu配置</title>
    <link href="https://thonsun.github.io/2019/12/28/cong-an-zhuang-di-san-fang-ruan-jian-xue-xi-ubuntu-pei-zhi/"/>
    <id>https://thonsun.github.io/2019/12/28/cong-an-zhuang-di-san-fang-ruan-jian-xue-xi-ubuntu-pei-zhi/</id>
    <published>2019-12-28T08:12:56.000Z</published>
    <updated>2020-12-16T09:17:22.899Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用电脑浏览效果更佳！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这篇文章中，将学到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu安装软件从系统源到第三方软件源配置&lt;/li&gt;
&lt;li&gt;Ubuntu安装软件默认配置（路径，环境变量）&lt;/li&gt;
&lt;li&gt;待添加&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="tools" scheme="https://thonsun.github.io/categories/tools/"/>
    
    
      <category term="Ubuntu" scheme="https://thonsun.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Useful trick for linuxs work</title>
    <link href="https://thonsun.github.io/2019/10/23/useful-trick-for-linuxs-work/"/>
    <id>https://thonsun.github.io/2019/10/23/useful-trick-for-linuxs-work/</id>
    <published>2019-10-23T05:20:57.000Z</published>
    <updated>2020-12-16T09:43:07.789Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用电脑浏览效果更佳！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="os" scheme="https://thonsun.github.io/categories/os/"/>
    
    
      <category term="-linux" scheme="https://thonsun.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>RedHat基本使用</title>
    <link href="https://thonsun.github.io/2019/09/20/redhat-ji-ben-shi-yong/"/>
    <id>https://thonsun.github.io/2019/09/20/redhat-ji-ben-shi-yong/</id>
    <published>2019-09-20T01:52:33.000Z</published>
    <updated>2020-12-16T09:41:36.366Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用电脑浏览效果更佳！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、记录RedHat基本使用&quot;&gt;&lt;a href=&quot;#一、记录RedHat基本使用&quot; class=&quot;headerlink&quot; title=&quot;一、记录RedHat基本使用&quot;&gt;&lt;/a&gt;一、记录RedHat基本使用&lt;/h2&gt;&lt;p&gt;用惯Ubuntu还得是要走出舒服区去踩坑RedHat了&lt;/p&gt;
    
    </summary>
    
      <category term="os" scheme="https://thonsun.github.io/categories/os/"/>
    
    
      <category term="linux" scheme="https://thonsun.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>LIEF在CTFpatch常用API</title>
    <link href="https://thonsun.github.io/2019/07/27/lief-zai-ctfpatch-chang-yong-api/"/>
    <id>https://thonsun.github.io/2019/07/27/lief-zai-ctfpatch-chang-yong-api/</id>
    <published>2019-07-27T14:16:35.000Z</published>
    <updated>2020-12-16T09:31:15.010Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用电脑浏览效果更佳！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;​    记录LIEF在CTF中打patch的常用函数，更多详细参考官方文档。 &lt;a href=&quot;https://lief.quarkslab.com/doc/latest/api/python/elf.html#parser&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接&lt;/a&gt;，此处记录在CTF方面的应用详细。LIEF不仅仅用于ELF文件的修改，还可以在PE，Mach-o，Android等方面都有应用。按照官方文档的说明，LIEF的目的是提供一个跨平台的库，可以解析，修改和抽象ELF，PE，MachO和Android格式，目前支持的格式有&lt;code&gt;ELF&lt;/code&gt;, &lt;code&gt;PE&lt;/code&gt;, &lt;code&gt;MachO&lt;/code&gt;, &lt;code&gt;DEX&lt;/code&gt;, &lt;code&gt;OAT&lt;/code&gt;, &lt;code&gt;ART&lt;/code&gt; and &lt;code&gt;VDEX&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在CTF中linux的ELF应用中在于在机器语言级别修改binary的漏洞（patch），下面将介绍常用的LIEF的函数使用，围绕函数API展开接收该函数接收的参数、返回结果、应用代码。&lt;/p&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://thonsun.github.io/categories/pwn/"/>
    
    
      <category term="pwn patch" scheme="https://thonsun.github.io/tags/pwn-patch/"/>
    
  </entry>
  
  <entry>
    <title>unlink利用介绍</title>
    <link href="https://thonsun.github.io/2019/07/25/unlink-li-yong-jie-shao/"/>
    <id>https://thonsun.github.io/2019/07/25/unlink-li-yong-jie-shao/</id>
    <published>2019-07-25T12:06:49.000Z</published>
    <updated>2020-12-16T09:42:59.778Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用电脑浏览效果更佳！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;​    记录当下加入检查机制的unlink宏一般利用思想，主要在glibc pwn下的unlink利用手法。&lt;/p&gt;
&lt;h3 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;h4 id=&quot;unlink的工作&quot;&gt;&lt;a href=&quot;#unlink的工作&quot; class=&quot;headerlink&quot; title=&quot;unlink的工作&quot;&gt;&lt;/a&gt;unlink的工作&lt;/h4&gt;&lt;p&gt;unlink(AV, P, BK, FD)：P是在空闲双向链表中的freed chunk(如small bins,larged bins,unsorted bins)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在free检查前后是否可以合并的时候，对free(ptr) ptr前后相邻的chunk就是unlink的目标p（即把它从freed chunk链表卸下的一步工作）;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在malloc检查到size符合small bin等(只有fast bin用fd的单向链表，LIFO的分配管理)，分配chunk 从freed chunk 双向链表拿下&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://thonsun.github.io/categories/pwn/"/>
    
    
      <category term="heap" scheme="https://thonsun.github.io/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>off by one 利用原理</title>
    <link href="https://thonsun.github.io/2019/07/24/off-by-one-li-yong-yuan-li/"/>
    <id>https://thonsun.github.io/2019/07/24/off-by-one-li-yong-yuan-li/</id>
    <published>2019-07-24T02:30:25.000Z</published>
    <updated>2020-12-16T09:40:58.753Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用电脑浏览效果更佳！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;​    记录分析off-by-one(off-by-null，只是覆盖一字节内容不同而已)的漏洞利用原理，使得萌新如我在看ctf-wiki上的pwn的glibc利用手法能够深入的了解off-by-one的原理。此处挑选的是上面的例一：Asis CTF 2016 b00ks进行详细的介绍，说实话，把这道题弄懂确实费了我好多时间，（多少次在放弃heap pwn与断断续续的不甘心中把这道题看完了，一些分析过程中也加深了对Linux下从ELF文件到加载到内存的映射结构的理解，包括动态链接与映射，内存页保护，malloc与mmap的调用分配内存大小的区别 ）。不禁想起俞敏洪在演讲中提到的，愚笨的我只能比其他人一遍又一遍的学，终究我也能够学会。&lt;/p&gt;
    
    </summary>
    
      <category term="pwn" scheme="https://thonsun.github.io/categories/pwn/"/>
    
    
      <category term="heap" scheme="https://thonsun.github.io/tags/heap/"/>
    
  </entry>
  
</feed>
